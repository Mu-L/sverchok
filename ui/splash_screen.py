import bpy
import os
from bpy.props import IntProperty, StringProperty, BoolProperty, PointerProperty
from bpy.types import Operator, Panel

class SV_OT_splash_screen_simple(Operator):
    """Splash Screen –¥–ª—è Sverchok"""
    bl_idname = "sv.splash_screen_simple"
    bl_label = "Sverchok - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    bl_options = {'REGISTER'}

    current_index: IntProperty(default=0)
    _image_files = []
    _loaded_images = []
    _textures = []
    _initialized = False

    def get_image_files(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        ui_dir = os.path.dirname(__file__)
        splash_dir = os.path.join(ui_dir, "splash_images")

        if not os.path.exists(splash_dir):
            return []

        image_files = []
        supported_formats = {'.png', '.jpg', '.jpeg', '.bmp', '.tga'}

        try:
            for file in sorted(os.listdir(splash_dir)):
                file_lower = file.lower()
                if any(file_lower.endswith(fmt) for fmt in supported_formats):
                    image_files.append(file)
        except Exception as e:
            print(f"Sverchok Splash Error: {e}")

        return image_files

    def get_image_size(self, image_path):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            img = bpy.data.images.load(image_path, check_existing=False)
            width, height = img.size
            bpy.data.images.remove(img)
            return width, height
        except:
            return 800, 600  # –†–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def load_current_image(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É"""
        if not self._image_files or self.current_index >= len(self._image_files):
            return None

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.cleanup_images()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        current_file = self._image_files[self.current_index]
        ui_dir = os.path.dirname(__file__)
        image_path = os.path.join(ui_dir, "splash_images", current_file)

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = bpy.data.images.load(image_path, check_existing=True)
            img.name = f"sv_splash_img_{self.current_index}"
            self._loaded_images.append(img)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
            texture_name = f"sv_splash_tex_{self.current_index}"
            texture = bpy.data.textures.new(name=texture_name, type='IMAGE')
            texture.image = img
            texture.extension = 'CLIP'
            self._textures.append(texture)

            return texture
        except Exception as e:
            print(f"Sverchok Splash: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {current_file}: {e}")
            return None

    def invoke(self, context, event):
        if not self._initialized:
            self._image_files = self.get_image_files()
            self._initialized = True

        if not self._image_files:
            self.report({'WARNING'}, "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ splash_images")
            return {'CANCELLED'}

        self.current_index = 0

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        current_file = self._image_files[self.current_index]
        ui_dir = os.path.dirname(__file__)
        image_path = os.path.join(ui_dir, "splash_images", current_file)
        img_width, img_height = self.get_image_size(image_path)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.load_current_image()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è UI)
        width = max(img_width + 100, 1200)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 1200
        height = max(img_height + 200, 900)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ 900

        return context.window_manager.invoke_popup(self, width=int(width))

    def draw(self, context):
        layout = self.layout

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        row = layout.row()
        row.label(text="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sverchok!", icon='NODETREE')

        if not self._image_files:
            box = layout.box()
            box.label(text="üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", icon='ERROR')
            box.label(text="–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'splash_images' –∑–¥–µ—Å—å:")
            ui_dir = os.path.dirname(__file__)
            splash_dir = os.path.join(ui_dir, "splash_images")
            box.label(text=splash_dir)
            box.label(text="–ò –¥–æ–±–∞–≤—å—Ç–µ PNG/JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–ª–∞–π–¥–µ
        current_file = self._image_files[self.current_index]
        box = layout.box()
        #col = box.column(align=True)
        #col.label(text=f"üìä –°–ª–∞–π–¥ {self.current_index + 1} –∏–∑ {len(self._image_files)}")
        #col.label(text=f"üìÑ {current_file}")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ template_preview
        if self._textures:
            current_texture = self._textures[0]
            try:
                # –°–æ–∑–¥–∞–µ–º box –¥–ª—è preview —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                preview_box = layout.box()

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º template_preview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã
                preview_box.template_preview(
                    current_texture,
                    show_buttons=False,
                    preview_id="splash_preview"
                )

            except Exception as e:
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ template_preview –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                error_box = layout.box()
                error_box.scale_y = 6.0
                error_box.alignment = 'CENTER'
                error_box.label(text="‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", icon='ERROR')
                print(f"Preview error: {e}")
        else:
            box = layout.box()
            box.scale_y = 6.0
            box.alignment = 'CENTER'
            box.label(text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", icon='ERROR')

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self.draw_navigation(layout)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.draw_support_buttons(layout)

    def draw_navigation(self, layout):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        row = layout.row()
        row.scale_y = 1.5

        # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
        if self.current_index > 0:
            op = row.operator("sv.splash_simple_previous", text="‚óÄ –ù–∞–∑–∞–¥", icon='BACK')
        else:
            row.label(text="")

        # –ö–Ω–æ–ø–∫–∞ –ó–∞–∫—Ä—ã—Ç—å
        #row.operator("sv.splash_simple_close", text="‚úï –ó–∞–∫—Ä—ã—Ç—å", icon='X')

        # –ö–Ω–æ–ø–∫–∞ –î–∞–ª–µ–µ
        if self.current_index < len(self._image_files) - 1:
            op = row.operator("sv.splash_simple_next", text="–î–∞–ª–µ–µ ‚ñ∂", icon='FORWARD')
        else:
            row.label(text="")

    def draw_support_buttons(self, layout):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        return
        layout.separator()
        layout.label(text="üîó –†–µ—Å—É—Ä—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", icon='URL')

        flow = layout.grid_flow(row_major=True, columns=2, even_columns=True)

        urls = [
            ("üêô GitHub", "https://github.com/nortikin/sverchok"),
            ("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "https://sverchok.readthedocs.io/"),
            ("üí¨ –§–æ—Ä—É–º", "https://blenderartists.org/c/addons/sverchok/"),
            ("‚ù§Ô∏è Patreon", "https://www.patreon.com/sverchok")
        ]

        for label, url in urls:
            op = flow.operator("wm.url_open", text=label)
            op.url = url

    def execute(self, context):
        return {'FINISHED'}

    def cancel(self, context):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏"""
        self.cleanup_images()

    def cleanup_images(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
        for texture in self._textures:
            try:
                if texture and texture.name.startswith("sv_splash_tex_"):
                    bpy.data.textures.remove(texture)
            except:
                pass
        self._textures.clear()

        # –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for img in self._loaded_images:
            try:
                if img and img.name.startswith("sv_splash_img_"):
                    bpy.data.images.remove(img)
            except:
                pass
        self._loaded_images.clear()

class SV_OT_splash_simple_next(Operator):
    bl_idname = "sv.splash_simple_next"
    bl_label = "–î–∞–ª–µ–µ"
    bl_description = "–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    def execute(self, context):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        bpy.ops.sv.splash_simple_close()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
        for window in context.window_manager.windows:
            for area in window.screen.areas:
                if area.type == 'PREFERENCES':
                    for region in area.regions:
                        if region.type == 'WINDOW':
                            with context.temp_override(window=window, area=area, region=region):
                                try:
                                    if hasattr(context, 'active_operator') and context.active_operator:
                                        op = context.active_operator
                                        if op.bl_idname == 'sv.splash_screen_simple':
                                            next_index = op.current_index + 1
                                            if next_index < len(op._image_files):
                                                # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π splash screen —Å –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
                                                bpy.ops.sv.splash_screen_simple('INVOKE_DEFAULT')
                                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –Ω–æ–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
                                                new_op = getattr(context, 'active_operator', None)
                                                if new_op and new_op.bl_idname == 'sv.splash_screen_simple':
                                                    new_op.current_index = next_index
                                                    new_op.load_current_image()
                                                return {'FINISHED'}
                                except Exception as e:
                                    print(f"Splash next error: {e}")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        bpy.ops.sv.splash_screen_simple('INVOKE_DEFAULT')
        return {'FINISHED'}

class SV_OT_splash_simple_previous(Operator):
    bl_idname = "sv.splash_simple_previous"
    bl_label = "–ù–∞–∑–∞–¥"
    bl_description = "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    def execute(self, context):
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        bpy.ops.sv.splash_simple_close()

        for window in context.window_manager.windows:
            for area in window.screen.areas:
                if area.type == 'PREFERENCES':
                    for region in area.regions:
                        if region.type == 'WINDOW':
                            with context.temp_override(window=window, area=area, region=region):
                                try:
                                    if hasattr(context, 'active_operator') and context.active_operator:
                                        op = context.active_operator
                                        if op.bl_idname == 'sv.splash_screen_simple':
                                            prev_index = op.current_index - 1
                                            if prev_index >= 0:
                                                # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π splash screen —Å –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
                                                bpy.ops.sv.splash_screen_simple('INVOKE_DEFAULT')
                                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –Ω–æ–≤–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
                                                new_op = getattr(context, 'active_operator', None)
                                                if new_op and new_op.bl_idname == 'sv.splash_screen_simple':
                                                    new_op.current_index = prev_index
                                                    new_op.load_current_image()
                                                return {'FINISHED'}
                                except Exception as e:
                                    print(f"Splash previous error: {e}")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        bpy.ops.sv.splash_screen_simple('INVOKE_DEFAULT')
        return {'FINISHED'}

class SV_OT_splash_simple_close(Operator):
    bl_idname = "sv.splash_simple_close"
    bl_label = "–ó–∞–∫—Ä—ã—Ç—å"
    bl_description = "–ó–∞–∫—Ä—ã—Ç—å splash screen"

    def execute(self, context):
        return {'FINISHED'}

class NODE_PT_sverchok_splash_panel(Panel):
    """–ü–∞–Ω–µ–ª—å –¥–ª—è Sverchok Splash Screen"""
    bl_label = "Sverchok Splash"
    bl_idname = "NODE_PT_sverchok_splash_panel"
    bl_space_type = 'NODE_EDITOR'
    bl_region_type = 'UI'
    bl_category = "Sverchok"

    @classmethod
    def poll(cls, context):
        return (context.space_data.tree_type == 'SverchokTree'
                if hasattr(context.space_data, 'tree_type') else False)

    def draw(self, context):
        layout = self.layout
        layout.operator("sv.splash_screen_simple",
                       text="–ü–æ–∫–∞–∑–∞—Ç—å Splash Screen",
                       icon='IMAGE_DATA')

def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤"""
    bpy.utils.register_class(SV_OT_splash_screen_simple)
    bpy.utils.register_class(SV_OT_splash_simple_next)
    bpy.utils.register_class(SV_OT_splash_simple_previous)
    bpy.utils.register_class(SV_OT_splash_simple_close)
    bpy.utils.register_class(NODE_PT_sverchok_splash_panel)

    print("Sverchok Splash Screen: —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

def unregister():
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    bpy.utils.unregister_class(NODE_PT_sverchok_splash_panel)
    bpy.utils.unregister_class(SV_OT_splash_simple_close)
    bpy.utils.unregister_class(SV_OT_splash_simple_previous)
    bpy.utils.unregister_class(SV_OT_splash_simple_next)
    bpy.utils.unregister_class(SV_OT_splash_screen_simple)

if __name__ == "__main__":
    register()
